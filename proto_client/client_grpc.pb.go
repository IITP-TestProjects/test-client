// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: client.proto

package proto_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransferSign_GetPartSign_FullMethodName   = "/transfer_sign.TransferSign/GetPartSign"
	TransferSign_GetLegacySign_FullMethodName = "/transfer_sign.TransferSign/GetLegacySign"
)

// TransferSignClient is the client API for TransferSign service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferSignClient interface {
	GetPartSign(ctx context.Context, in *GetPartSignRequest, opts ...grpc.CallOption) (*Ack, error)
	GetLegacySign(ctx context.Context, in *GetLegacySignRequest, opts ...grpc.CallOption) (*Ack, error)
}

type transferSignClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferSignClient(cc grpc.ClientConnInterface) TransferSignClient {
	return &transferSignClient{cc}
}

func (c *transferSignClient) GetPartSign(ctx context.Context, in *GetPartSignRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, TransferSign_GetPartSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferSignClient) GetLegacySign(ctx context.Context, in *GetLegacySignRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, TransferSign_GetLegacySign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferSignServer is the server API for TransferSign service.
// All implementations must embed UnimplementedTransferSignServer
// for forward compatibility
type TransferSignServer interface {
	GetPartSign(context.Context, *GetPartSignRequest) (*Ack, error)
	GetLegacySign(context.Context, *GetLegacySignRequest) (*Ack, error)
	mustEmbedUnimplementedTransferSignServer()
}

// UnimplementedTransferSignServer must be embedded to have forward compatible implementations.
type UnimplementedTransferSignServer struct {
}

func (UnimplementedTransferSignServer) GetPartSign(context.Context, *GetPartSignRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartSign not implemented")
}
func (UnimplementedTransferSignServer) GetLegacySign(context.Context, *GetLegacySignRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegacySign not implemented")
}
func (UnimplementedTransferSignServer) mustEmbedUnimplementedTransferSignServer() {}

// UnsafeTransferSignServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferSignServer will
// result in compilation errors.
type UnsafeTransferSignServer interface {
	mustEmbedUnimplementedTransferSignServer()
}

func RegisterTransferSignServer(s grpc.ServiceRegistrar, srv TransferSignServer) {
	s.RegisterService(&TransferSign_ServiceDesc, srv)
}

func _TransferSign_GetPartSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSignServer).GetPartSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferSign_GetPartSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSignServer).GetPartSign(ctx, req.(*GetPartSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferSign_GetLegacySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegacySignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSignServer).GetLegacySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferSign_GetLegacySign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSignServer).GetLegacySign(ctx, req.(*GetLegacySignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferSign_ServiceDesc is the grpc.ServiceDesc for TransferSign service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferSign_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer_sign.TransferSign",
	HandlerType: (*TransferSignServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartSign",
			Handler:    _TransferSign_GetPartSign_Handler,
		},
		{
			MethodName: "GetLegacySign",
			Handler:    _TransferSign_GetLegacySign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
