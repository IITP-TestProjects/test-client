// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: interface.proto

package proto_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mesh_JoinNetwork_FullMethodName  = "/mesh.Mesh/JoinNetwork"
	Mesh_Publish_FullMethodName      = "/mesh.Mesh/Publish"
	Mesh_LeaveNetwork_FullMethodName = "/mesh.Mesh/LeaveNetwork"
)

// MeshClient is the client API for Mesh service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshClient interface {
	// 최초 네트워크 진입 시 committee 정보 수신을 위한 subscribe에  필수
	JoinNetwork(ctx context.Context, in *NodeAccount, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Payload], error)
	// 노드가 메시지를 브로드캐스트할 때
	Publish(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Ack, error)
	// graceful-shutdown을 위한 option(없어도 자동 감지되어 연결해제됨)
	LeaveNetwork(ctx context.Context, in *NodeAccount, opts ...grpc.CallOption) (*Ack, error)
}

type meshClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshClient(cc grpc.ClientConnInterface) MeshClient {
	return &meshClient{cc}
}

func (c *meshClient) JoinNetwork(ctx context.Context, in *NodeAccount, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Payload], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Mesh_ServiceDesc.Streams[0], Mesh_JoinNetwork_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeAccount, Payload]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Mesh_JoinNetworkClient = grpc.ServerStreamingClient[Payload]

func (c *meshClient) Publish(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Mesh_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshClient) LeaveNetwork(ctx context.Context, in *NodeAccount, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Mesh_LeaveNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshServer is the server API for Mesh service.
// All implementations must embed UnimplementedMeshServer
// for forward compatibility.
type MeshServer interface {
	// 최초 네트워크 진입 시 committee 정보 수신을 위한 subscribe에  필수
	JoinNetwork(*NodeAccount, grpc.ServerStreamingServer[Payload]) error
	// 노드가 메시지를 브로드캐스트할 때
	Publish(context.Context, *Payload) (*Ack, error)
	// graceful-shutdown을 위한 option(없어도 자동 감지되어 연결해제됨)
	LeaveNetwork(context.Context, *NodeAccount) (*Ack, error)
	mustEmbedUnimplementedMeshServer()
}

// UnimplementedMeshServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeshServer struct{}

func (UnimplementedMeshServer) JoinNetwork(*NodeAccount, grpc.ServerStreamingServer[Payload]) error {
	return status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (UnimplementedMeshServer) Publish(context.Context, *Payload) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMeshServer) LeaveNetwork(context.Context, *NodeAccount) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveNetwork not implemented")
}
func (UnimplementedMeshServer) mustEmbedUnimplementedMeshServer() {}
func (UnimplementedMeshServer) testEmbeddedByValue()              {}

// UnsafeMeshServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshServer will
// result in compilation errors.
type UnsafeMeshServer interface {
	mustEmbedUnimplementedMeshServer()
}

func RegisterMeshServer(s grpc.ServiceRegistrar, srv MeshServer) {
	// If the following call pancis, it indicates UnimplementedMeshServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mesh_ServiceDesc, srv)
}

func _Mesh_JoinNetwork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeAccount)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServer).JoinNetwork(m, &grpc.GenericServerStream[NodeAccount, Payload]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Mesh_JoinNetworkServer = grpc.ServerStreamingServer[Payload]

func _Mesh_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mesh_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServer).Publish(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesh_LeaveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServer).LeaveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mesh_LeaveNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServer).LeaveNetwork(ctx, req.(*NodeAccount))
	}
	return interceptor(ctx, in, info, handler)
}

// Mesh_ServiceDesc is the grpc.ServiceDesc for Mesh service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mesh_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mesh.Mesh",
	HandlerType: (*MeshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Mesh_Publish_Handler,
		},
		{
			MethodName: "LeaveNetwork",
			Handler:    _Mesh_LeaveNetwork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinNetwork",
			Handler:       _Mesh_JoinNetwork_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interface.proto",
}
