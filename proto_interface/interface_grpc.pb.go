// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
<<<<<<< HEAD
// - protoc             v3.12.4
=======
// - protoc             v6.32.0
>>>>>>> 0a98267 (feat: client - CEF - veifier 구조로 작동하게 수정)
// source: interface.proto

package proto_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mesh_JoinNetwork_FullMethodName             = "/mesh.Mesh/JoinNetwork"
	Mesh_LeaveNetwork_FullMethodName            = "/mesh.Mesh/LeaveNetwork"
	Mesh_RequestCommittee_FullMethodName        = "/mesh.Mesh/RequestCommittee"
	Mesh_RequestAggregatedCommit_FullMethodName = "/mesh.Mesh/RequestAggregatedCommit"
)

// MeshClient is the client API for Mesh service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshClient interface {
	// 최초 네트워크 진입 시 committee 정보 수신을 위한 subscribe에  필수
	// 노드가 메시지를 브로드캐스트할 때 JoinNetowrk의 stream으로 전송
	JoinNetwork(ctx context.Context, in *CommitteeCandidateInfo, opts ...grpc.CallOption) (Mesh_JoinNetworkClient, error)
	// graceful-shutdown을 위한 option(없어도 자동 감지되어 연결해제됨)
	LeaveNetwork(ctx context.Context, in *NodeAccount, opts ...grpc.CallOption) (*Ack, error)
	RequestCommittee(ctx context.Context, in *CommitteeCandidateInfo, opts ...grpc.CallOption) (*Ack, error)
	RequestAggregatedCommit(ctx context.Context, in *CommitData, opts ...grpc.CallOption) (*Ack, error)
}

type meshClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshClient(cc grpc.ClientConnInterface) MeshClient {
	return &meshClient{cc}
}

func (c *meshClient) JoinNetwork(ctx context.Context, in *CommitteeCandidateInfo, opts ...grpc.CallOption) (Mesh_JoinNetworkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mesh_ServiceDesc.Streams[0], Mesh_JoinNetwork_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &meshJoinNetworkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mesh_JoinNetworkClient interface {
	Recv() (*FinalizedCommittee, error)
	grpc.ClientStream
}

type meshJoinNetworkClient struct {
	grpc.ClientStream
}

func (x *meshJoinNetworkClient) Recv() (*FinalizedCommittee, error) {
	m := new(FinalizedCommittee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meshClient) LeaveNetwork(ctx context.Context, in *NodeAccount, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Mesh_LeaveNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshClient) RequestCommittee(ctx context.Context, in *CommitteeCandidateInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Mesh_RequestCommittee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshClient) RequestAggregatedCommit(ctx context.Context, in *CommitData, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Mesh_RequestAggregatedCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshServer is the server API for Mesh service.
// All implementations must embed UnimplementedMeshServer
// for forward compatibility
type MeshServer interface {
	// 최초 네트워크 진입 시 committee 정보 수신을 위한 subscribe에  필수
	// 노드가 메시지를 브로드캐스트할 때 JoinNetowrk의 stream으로 전송
	JoinNetwork(*CommitteeCandidateInfo, Mesh_JoinNetworkServer) error
	// graceful-shutdown을 위한 option(없어도 자동 감지되어 연결해제됨)
	LeaveNetwork(context.Context, *NodeAccount) (*Ack, error)
	RequestCommittee(context.Context, *CommitteeCandidateInfo) (*Ack, error)
	RequestAggregatedCommit(context.Context, *CommitData) (*Ack, error)
	mustEmbedUnimplementedMeshServer()
}

// UnimplementedMeshServer must be embedded to have forward compatible implementations.
type UnimplementedMeshServer struct {
}

func (UnimplementedMeshServer) JoinNetwork(*CommitteeCandidateInfo, Mesh_JoinNetworkServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (UnimplementedMeshServer) LeaveNetwork(context.Context, *NodeAccount) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveNetwork not implemented")
}
func (UnimplementedMeshServer) RequestCommittee(context.Context, *CommitteeCandidateInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCommittee not implemented")
}
func (UnimplementedMeshServer) RequestAggregatedCommit(context.Context, *CommitData) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAggregatedCommit not implemented")
}
func (UnimplementedMeshServer) mustEmbedUnimplementedMeshServer() {}

// UnsafeMeshServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshServer will
// result in compilation errors.
type UnsafeMeshServer interface {
	mustEmbedUnimplementedMeshServer()
}

func RegisterMeshServer(s grpc.ServiceRegistrar, srv MeshServer) {
	s.RegisterService(&Mesh_ServiceDesc, srv)
}

func _Mesh_JoinNetwork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitteeCandidateInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServer).JoinNetwork(m, &meshJoinNetworkServer{stream})
}

type Mesh_JoinNetworkServer interface {
	Send(*FinalizedCommittee) error
	grpc.ServerStream
}

type meshJoinNetworkServer struct {
	grpc.ServerStream
}

func (x *meshJoinNetworkServer) Send(m *FinalizedCommittee) error {
	return x.ServerStream.SendMsg(m)
}

func _Mesh_LeaveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServer).LeaveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mesh_LeaveNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServer).LeaveNetwork(ctx, req.(*NodeAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesh_RequestCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitteeCandidateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServer).RequestCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mesh_RequestCommittee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServer).RequestCommittee(ctx, req.(*CommitteeCandidateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesh_RequestAggregatedCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServer).RequestAggregatedCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mesh_RequestAggregatedCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServer).RequestAggregatedCommit(ctx, req.(*CommitData))
	}
	return interceptor(ctx, in, info, handler)
}

// Mesh_ServiceDesc is the grpc.ServiceDesc for Mesh service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mesh_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mesh.Mesh",
	HandlerType: (*MeshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaveNetwork",
			Handler:    _Mesh_LeaveNetwork_Handler,
		},
		{
			MethodName: "RequestCommittee",
			Handler:    _Mesh_RequestCommittee_Handler,
		},
		{
			MethodName: "RequestAggregatedCommit",
			Handler:    _Mesh_RequestAggregatedCommit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinNetwork",
			Handler:       _Mesh_JoinNetwork_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interface.proto",
}
